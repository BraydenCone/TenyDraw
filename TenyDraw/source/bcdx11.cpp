#include "bcdx11.h"

#define WIN32_LEAN_AND_MEAN
#include <windows.h>
#include <d3d11.h>

#define safe_release(x) if(x) { x->Release(); x = 0; }

static const unsigned char pixel_shader_raw[1148] =
{
	0x44, 0x58, 0x42, 0x43, 0x0b, 0xd8, 0x07, 0xa5, 0x9d, 0xd0, 0xef, 0x07, 0xe7, 0x3a, 0x39, 0x55,
	0x76, 0x28, 0x41, 0x49, 0x01, 0x00, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
	0x34, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00,
	0x00, 0x04, 0x00, 0x00, 0x52, 0x44, 0x45, 0x46, 0x0c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x98, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0xff, 0xff,
	0x00, 0x01, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x30,
	0x00, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x30, 0x00, 0x24, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x73, 0x00, 0xab, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
	0xe0, 0x00, 0x00, 0x00, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x00, 0xab, 0x00, 0x00, 0x03, 0x00,
	0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3d,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c,
	0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x72, 0x20, 0x31, 0x30, 0x2e, 0x31, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x6c, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
	0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
	0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0x4f, 0x53, 0x47, 0x4e,
	0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x00, 0xab, 0xab,
	0x53, 0x48, 0x44, 0x52, 0x08, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00,
	0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04,
	0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03,
	0xf2, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x68, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x09,
	0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x80, 0x41, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0xcd, 0xcc, 0xcc, 0x3e,
	0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80,
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0xcd, 0xcc, 0x0c, 0x3f,
	0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80,
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00,
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f,
	0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x20, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0,
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x38, 0x00, 0x00, 0x07,
	0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x3a, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01,
	0x53, 0x54, 0x41, 0x54, 0x74, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

static const unsigned char vertex_shader_raw[920] =
{
	0x44, 0x58, 0x42, 0x43, 0x82, 0xe5, 0x60, 0xbe, 0x65, 0x7e, 0x72, 0x14, 0xa7, 0x7e, 0x00, 0x08,
	0x02, 0xdc, 0x7b, 0x9a, 0x01, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
	0x34, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00,
	0x1c, 0x03, 0x00, 0x00, 0x52, 0x44, 0x45, 0x46, 0xcc, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x04, 0xfe, 0xff,
	0x00, 0x01, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54,
	0x41, 0x4e, 0x54, 0x5f, 0x42, 0x55, 0x46, 0x46, 0x45, 0x52, 0x00, 0xab, 0x3c, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x00, 0xab, 0xab, 0xab,
	0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x4d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x20, 0x28, 0x52, 0x29, 0x20, 0x48, 0x4c,
	0x53, 0x4c, 0x20, 0x53, 0x68, 0x61, 0x64, 0x65, 0x72, 0x20, 0x43, 0x6f, 0x6d, 0x70, 0x69, 0x6c,
	0x65, 0x72, 0x20, 0x31, 0x30, 0x2e, 0x31, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00,
	0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00,
	0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x43, 0x4f, 0x4c, 0x4f, 0x52, 0x00, 0x54,
	0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x4e, 0x6c, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00,
	0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00,
	0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x43, 0x4f, 0x4c, 0x4f,
	0x52, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0x53, 0x48, 0x44, 0x52,
	0x28, 0x01, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x04,
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03,
	0x72, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0xf2, 0x10, 0x10, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x67, 0x00, 0x00, 0x04, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03,
	0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00,
	0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x15, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
	0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
	0xa6, 0x1a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x08, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
	0x36, 0x00, 0x00, 0x05, 0xf2, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x1e, 0x10, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00,
	0x46, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x53, 0x54, 0x41, 0x54,
	0x74, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

typedef float matrix_f[4][4];

namespace state
{
	ID3D11Device*               device                   = 0;
	ID3D11DeviceContext*        context                  = 0;
	ID3D11VertexShader*         vertex_shader_sdf        = 0;
	ID3D11PixelShader*          pixel_shader_sdf         = 0;
	ID3D11InputLayout*          input_layout             = 0;
	ID3D11BlendState*           blend_state              = 0;
	ID3D11RasterizerState*      raster_state             = 0;
	ID3D11DepthStencilState*    depth_stencil_state      = 0;
	ID3D11Buffer*               vertex_constant_buffer   = 0;
	ID3D11SamplerState*         texture_sampler          = 0;
	ID3D11Buffer*               vertex_buffer            = 0;
	ID3D11Buffer*               index_buffer             = 0;
	ID3D11ShaderResourceView*   texture_shader_view      = 0;

	unsigned int                window_width             = 0;
	unsigned int                window_height            = 0;
}

int bcdx11::initialize(void* device, void* context)
{
	if (!device || !context)
	{
		return 1;
	}

	state::device = (ID3D11Device*)device;
	state::context = (ID3D11DeviceContext*)context;

	if (create_shaders_sdf())
	{
		return 1;
	}

	if (create_state())
	{
		return 1;
	}

	if (create_textures())
	{
		return 1;
	}

	if (create_buffers())
	{
		return 1;
	}

	return 0;
}

int bcdx11::create_shaders_sdf()
{
	if (FAILED(state::device->CreatePixelShader(pixel_shader_raw, _countof(pixel_shader_raw), 0, &state::pixel_shader_sdf)))
	{
		return 1;
	}

	if (FAILED(state::device->CreateVertexShader(vertex_shader_raw, _countof(vertex_shader_raw), 0, &state::vertex_shader_sdf)))
	{
		safe_release(state::pixel_shader_sdf);
		return 1;
	}

	D3D11_INPUT_ELEMENT_DESC input_desc[] =
	{
		{ "POSITION", 0, DXGI_FORMAT_R32G32B32_FLOAT,	0, (UINT)offsetof(factory::vertex, position),	D3D11_INPUT_PER_VERTEX_DATA, 0 },
		{ "COLOR",    0, DXGI_FORMAT_R8G8B8A8_UNORM,	0, (UINT)offsetof(factory::vertex, color),		D3D11_INPUT_PER_VERTEX_DATA, 0 },
		{ "TEXCOORD", 0, DXGI_FORMAT_R32G32_FLOAT,		0, (UINT)offsetof(factory::vertex, uv),			D3D11_INPUT_PER_VERTEX_DATA, 0 },
	};

	if (FAILED(state::device->CreateInputLayout(input_desc, 3, vertex_shader_raw, _countof(vertex_shader_raw), &state::input_layout)))
	{
		safe_release(state::pixel_shader_sdf);
		safe_release(state::vertex_shader_sdf);
		return 1;
	}

	return 0;
}

int bcdx11::create_textures()
{
	{
		D3D11_SAMPLER_DESC desc;
		ZeroMemory(&desc, sizeof(desc));
		desc.Filter = D3D11_FILTER_MIN_MAG_MIP_LINEAR;
		desc.AddressU = D3D11_TEXTURE_ADDRESS_WRAP;
		desc.AddressV = D3D11_TEXTURE_ADDRESS_WRAP;
		desc.AddressW = D3D11_TEXTURE_ADDRESS_WRAP;
		desc.MipLODBias = 0.0f;
		desc.ComparisonFunc = D3D11_COMPARISON_ALWAYS;
		desc.MinLOD = 0.0f;
		desc.MaxLOD = 0.0f;
		state::device->CreateSamplerState(&desc, &state::texture_sampler);
	}
	
	D3D11_TEXTURE2D_DESC image_texture_desc;
	ZeroMemory(&image_texture_desc, sizeof(D3D11_TEXTURE2D_DESC));
	image_texture_desc.Width = ATLAS_WIDTH;
	image_texture_desc.Height = ATLAS_HEIGHT;
	image_texture_desc.MipLevels = 1;
	image_texture_desc.ArraySize = 1;
	image_texture_desc.Format = DXGI_FORMAT_R8_UNORM;
	image_texture_desc.SampleDesc.Count = 1;
	image_texture_desc.SampleDesc.Quality = 0;
	image_texture_desc.Usage = D3D11_USAGE_DEFAULT;
	image_texture_desc.BindFlags = D3D11_BIND_SHADER_RESOURCE;
	image_texture_desc.CPUAccessFlags = 0;
	image_texture_desc.MiscFlags = 0;

	D3D11_SUBRESOURCE_DATA image_sub_resource;
	ZeroMemory(&image_sub_resource, sizeof(D3D11_SUBRESOURCE_DATA));
	image_sub_resource.pSysMem = (void*)get_atlas_data();
	image_sub_resource.SysMemPitch = image_texture_desc.Width;
	image_sub_resource.SysMemSlicePitch = 0;

	ID3D11Texture2D* d3d_texture;
	if (FAILED(state::device->CreateTexture2D(&image_texture_desc, &image_sub_resource, &d3d_texture)))
	{
		return 1;
	}

	D3D11_SHADER_RESOURCE_VIEW_DESC shader_resource_desc;
	ZeroMemory(&shader_resource_desc, sizeof(D3D11_SHADER_RESOURCE_VIEW_DESC));
	shader_resource_desc.Format = DXGI_FORMAT_R8_UNORM;
	shader_resource_desc.ViewDimension = D3D11_SRV_DIMENSION_TEXTURE2D;
	shader_resource_desc.Texture2D.MipLevels = image_texture_desc.MipLevels;
	shader_resource_desc.Texture2D.MostDetailedMip = 0;

	if (FAILED(state::device->CreateShaderResourceView(d3d_texture, &shader_resource_desc, &state::texture_shader_view)))
	{
		return 1;
	}

	d3d_texture->Release();

	return 0;
}

int bcdx11::create_buffers()
{
	{
		if (state::vertex_buffer)
		{
			safe_release(state::vertex_buffer);
		}

		D3D11_BUFFER_DESC desc;
		desc.Usage = D3D11_USAGE_DYNAMIC;
		desc.ByteWidth = (unsigned int)(factory::get_context()->get_vertices()->capacity() * sizeof(factory::vertex));
		desc.BindFlags = D3D11_BIND_VERTEX_BUFFER;
		desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
		desc.MiscFlags = 0;
		desc.StructureByteStride = 0;

		if (FAILED(state::device->CreateBuffer(&desc, 0, &state::vertex_buffer)))
		{
			return 1;
		}
	}

	{
		if (state::index_buffer)
		{
			safe_release(state::index_buffer);
		}

		D3D11_BUFFER_DESC desc;
		desc.Usage = D3D11_USAGE_DYNAMIC;
		desc.ByteWidth = (unsigned int)(factory::get_context()->get_indicies()->capacity() * sizeof(factory::indice));
		desc.BindFlags = D3D11_BIND_INDEX_BUFFER;
		desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
		desc.MiscFlags = 0;
		desc.StructureByteStride = 0;

		if (FAILED(state::device->CreateBuffer(&desc, 0, &state::index_buffer)))
		{
			return 1;
		}
	}

	return 0;
}

int bcdx11::create_state()
{
	{
		D3D11_BLEND_DESC desc;
		memset(&desc, 0, sizeof(desc));
		desc.AlphaToCoverageEnable = 0;
		desc.RenderTarget[0].BlendEnable = 1;
		desc.RenderTarget[0].SrcBlend = D3D11_BLEND_SRC_ALPHA;
		desc.RenderTarget[0].DestBlend = D3D11_BLEND_INV_SRC_ALPHA;
		desc.RenderTarget[0].BlendOp = D3D11_BLEND_OP_ADD;
		desc.RenderTarget[0].SrcBlendAlpha = D3D11_BLEND_ONE;
		desc.RenderTarget[0].DestBlendAlpha = D3D11_BLEND_INV_SRC_ALPHA;
		desc.RenderTarget[0].BlendOpAlpha = D3D11_BLEND_OP_ADD;
		desc.RenderTarget[0].RenderTargetWriteMask = D3D11_COLOR_WRITE_ENABLE_ALL;
		if (FAILED(state::device->CreateBlendState(&desc, &state::blend_state)))
		{
			return 1;
		}
	}

	{
		D3D11_RASTERIZER_DESC desc;
		memset(&desc, 0, sizeof(desc));
		desc.FillMode = D3D11_FILL_SOLID;
		desc.CullMode = D3D11_CULL_NONE;
		desc.FrontCounterClockwise = 0;
		desc.DepthBias = 0;
		desc.DepthBiasClamp = 0.0f;
		desc.SlopeScaledDepthBias = 0.0f;
		desc.DepthClipEnable = 1;
		desc.ScissorEnable = 1;
		desc.MultisampleEnable = 0;
		desc.AntialiasedLineEnable = 1;
		if (FAILED(state::device->CreateRasterizerState(&desc, &state::raster_state)))
		{
			return 1;
		}
	}

	{
		D3D11_DEPTH_STENCIL_DESC desc;
		memset(&desc, 0, sizeof(desc));
		desc.DepthEnable = 0;
		desc.DepthWriteMask = D3D11_DEPTH_WRITE_MASK_ALL;
		desc.DepthFunc = D3D11_COMPARISON_ALWAYS;
		desc.StencilEnable = 0;
		desc.FrontFace.StencilFailOp = desc.FrontFace.StencilDepthFailOp = desc.FrontFace.StencilPassOp = D3D11_STENCIL_OP_KEEP;
		desc.FrontFace.StencilFunc = D3D11_COMPARISON_ALWAYS;
		desc.BackFace = desc.FrontFace;
		if (FAILED(state::device->CreateDepthStencilState(&desc, &state::depth_stencil_state)))
		{
			return 1;
		}
	}

	{
		D3D11_BUFFER_DESC desc;
		memset(&desc, 0, sizeof(desc));
		desc.ByteWidth = sizeof(matrix_f);
		desc.Usage = D3D11_USAGE_DYNAMIC;
		desc.BindFlags = D3D11_BIND_CONSTANT_BUFFER;
		desc.CPUAccessFlags = D3D11_CPU_ACCESS_WRITE;
		desc.MiscFlags = 0;
		if (FAILED(state::device->CreateBuffer(&desc, 0, &state::vertex_constant_buffer)))
		{
			return 1;
		}
	}

	return 0;
}

void bcdx11::resize(unsigned int width, unsigned int height)
{
	state::window_width = width;
	state::window_height = height;
	set_view_port(0.0f, 0.0f, (float)width, (float)height);
	set_matrix(0.0f, 0.0f, (float)width, (float)height);
}

void bcdx11::clear_device_objects()
{
	safe_release(state::vertex_shader_sdf);
	safe_release(state::pixel_shader_sdf);
	safe_release(state::input_layout);
	safe_release(state::blend_state);
	safe_release(state::raster_state);
	safe_release(state::depth_stencil_state);
	safe_release(state::vertex_constant_buffer);
	safe_release(state::texture_sampler);
	safe_release(state::vertex_buffer);
	safe_release(state::index_buffer);
	safe_release(state::texture_shader_view);
}

void bcdx11::set_view_port(float x, float y, float width, float height)
{
	D3D11_VIEWPORT view_port;
	view_port.TopLeftX = 0.0f;
	view_port.TopLeftY = 0.0f;
	view_port.Width = (float)state::window_width;
	view_port.Height = (float)state::window_height;
	view_port.MinDepth = 0.0f;
	view_port.MaxDepth = 1.0f;
	state::context->RSSetViewports(1, &view_port);
}

void bcdx11::set_matrix(float x, float y, float width, float height)
{
	if (state::context)
	{
		D3D11_MAPPED_SUBRESOURCE mapped_resource;
		if (FAILED(state::context->Map(state::vertex_constant_buffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &mapped_resource)))
		{
			return;
		}

		matrix_f* constant_buffer = (matrix_f*)mapped_resource.pData;

		matrix_f mvp =
		{
			{ 2.0f / (width - x), 0.0f, 0.0f, 0.0f },
			{ 0.0f, 2.0f / (y - height), 0.0f, 0.0f },
			{ 0.0f, 0.0f, 0.5f, 0.0f },
			{ (width + x) / (x - width), (y + height) / (height - y), 0.5f, 1.0f },
		};

		memcpy(constant_buffer, &mvp, sizeof(matrix_f));
		state::context->Unmap(state::vertex_constant_buffer, 0);
	}
}

void bcdx11::set_state()
{
	unsigned int stride = sizeof(factory::vertex);
	unsigned int offset = 0;
	state::context->IASetInputLayout(state::input_layout);
	state::context->IASetVertexBuffers(0, 1, &state::vertex_buffer, &stride, &offset);
	state::context->IASetIndexBuffer(state::index_buffer, DXGI_FORMAT_R32_UINT, 0);
	state::context->IASetPrimitiveTopology(D3D11_PRIMITIVE_TOPOLOGY_TRIANGLELIST);
	state::context->VSSetShader(state::vertex_shader_sdf, 0, 0);
	state::context->VSSetConstantBuffers(0, 1, &state::vertex_constant_buffer);
	state::context->PSSetShader(state::pixel_shader_sdf, 0, 0);
	state::context->PSSetSamplers(0, 1, &state::texture_sampler);
	state::context->GSSetShader(0, 0, 0);
	state::context->HSSetShader(0, 0, 0);
	state::context->DSSetShader(0, 0, 0);
	state::context->CSSetShader(0, 0, 0);

	const float blend_factor[4] = { 0.0f, 0.0f, 0.0f, 0.0f };
	state::context->OMSetBlendState(state::blend_state, blend_factor, 0xffffffff);
	state::context->OMSetDepthStencilState(state::depth_stencil_state, 0);
	state::context->RSSetState(state::raster_state);
}

void bcdx11::shutdown()
{
	clear_device_objects();

	state::device          = 0;
	state::context         = 0;
	state::window_width    = 0;
	state::window_height   = 0;
}

void bcdx11::render()
{
	factory::batch_context* context = factory::get_context();

	{
		D3D11_MAPPED_SUBRESOURCE vtx_resource, idx_resource;

		if (state::context->Map(state::vertex_buffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &vtx_resource) != S_OK) { return; }
		if (state::context->Map(state::index_buffer, 0, D3D11_MAP_WRITE_DISCARD, 0, &idx_resource) != S_OK) { return; }

		memcpy(vtx_resource.pData, context->get_vertices()->data(), context->get_vertices()->size() * sizeof(factory::vertex));
		memcpy(idx_resource.pData, context->get_indicies()->data(), context->get_indicies()->size() * sizeof(factory::indice));

		state::context->Unmap(state::vertex_buffer, 0);
		state::context->Unmap(state::index_buffer, 0);
	}

	set_state();

	uint64_t cmd_length = factory::get_context()->get_commands()->size();
	for (uint64_t i = 0; i < cmd_length; ++i)
	{
		factory::batch_element* draw_cmd = &context->get_commands()->data()[i];
		const D3D11_RECT rect = { (LONG)draw_cmd->clip_rect.x, (LONG)draw_cmd->clip_rect.y, (LONG)draw_cmd->clip_rect.z, (LONG)draw_cmd->clip_rect.w };
		state::context->RSSetScissorRects(1, &rect);
		state::context->PSSetShaderResources(0, 1, &state::texture_shader_view);
		state::context->DrawIndexed(draw_cmd->element_count, draw_cmd->index_offset, 0);
	}
	factory::get_context()->flush();
}
